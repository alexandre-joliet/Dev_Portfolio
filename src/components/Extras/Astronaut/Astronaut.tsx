/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 astronaut_opti_draco.glb --transform --simplify 
Files: astronaut_opti_draco.glb [5.78MB] > /home/alex/dev/training_sandbox/portfolio/public/models/astronaut_opti_draco-transformed.glb [2.2MB] (62%)
*/

import { useEffect, useRef, useMemo } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import * as THREE from "three";
import gsap from "gsap";

const Astronaut = () => {
    //** Model & Texture */
    const groupRef = useRef<THREE.Group>(null!);

    const { scene, animations } = useGLTF(
        "/models/astronaut_fixorigin_draco-transformed.glb"
    );

    const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
    const { nodes, materials } = useGraph(clone);
    const { actions } = useAnimations(animations, groupRef);

    //** Animations */
    useEffect(() => {
        setTimeout(() => {
            if (actions.floating) {
                actions.floating.play();
            }
        }, 2000);

        const astronautTimeline = gsap.timeline({
            repeat: -1,
            // repeatDelay: 10,
        });
        astronautTimeline.to(groupRef.current.position, {
            duration: 30,
            ease: "power1.inOut",
            y: 1.5,
            z: 0.25,
        });
        astronautTimeline.to(groupRef.current.rotation, {
            duration: 10,
            ease: "power1.inOut",
            x: 1.6,
            y: 0.4,
            z: -1.5,
        });
        astronautTimeline.to(
            groupRef.current.position,
            {
                duration: 30,
                ease: "power1.inOut",
                x: 1,
                y: 3,
                z: 0,
            },
            "<+=8"
        );
        astronautTimeline.to(groupRef.current.position, {
            duration: 5,
            ease: "none",
            x: -0.5,
            z: -2,
        });
        astronautTimeline.to(groupRef.current.rotation, {
            duration: 1,
            ease: "none",
            x: Math.PI / 1.4,
            y: 0,
            z: 0.1,
        });
        astronautTimeline.to(groupRef.current.position, {
            duration: 30,
            ease: "none",
            x: -2,
            y: 0.25,
            z: 2,
        });

        if (groupRef.current) {
            astronautTimeline.play();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    return (
        <group
            ref={groupRef}
            position={[-2.4, -0.25, 2.0]}
            rotation={[0.4, Math.PI / 1.9, -1]}
        >
            <group
                dispose={null}
                scale={0.5}
                position={[0, -1, 0]}
            >
                <group name="Scene">
                    <group
                        name="Armature"
                        position={[0.007, 1.406, -0.031]}
                        scale={0.008}
                    >
                        <primitive object={nodes.GLTF_created_0_rootJoint} />
                    </group>
                    <skinnedMesh
                        name="Object_100"
                        geometry={
                            (nodes.Object_100 as THREE.SkinnedMesh).geometry
                        }
                        material={materials.material_0}
                        skeleton={
                            (nodes.Object_100 as THREE.SkinnedMesh).skeleton
                        }
                        position={[0.007, 1.406, -0.031]}
                        scale={0.008}
                        receiveShadow
                    />
                    <skinnedMesh
                        name="Object_103"
                        geometry={
                            (nodes.Object_103 as THREE.SkinnedMesh).geometry
                        }
                        material={materials.material_1}
                        skeleton={
                            (nodes.Object_103 as THREE.SkinnedMesh).skeleton
                        }
                        position={[0.007, 1.406, -0.031]}
                        scale={0.008}
                        receiveShadow
                    />
                    <skinnedMesh
                        name="Object_106"
                        geometry={
                            (nodes.Object_106 as THREE.SkinnedMesh).geometry
                        }
                        material={materials.material_2}
                        skeleton={
                            (nodes.Object_106 as THREE.SkinnedMesh).skeleton
                        }
                        position={[0.007, 1.406, -0.031]}
                        scale={0.008}
                        receiveShadow
                    />
                    <skinnedMesh
                        name="Object_99"
                        geometry={
                            (nodes.Object_99 as THREE.SkinnedMesh).geometry
                        }
                        material={materials.material_0}
                        skeleton={
                            (nodes.Object_99 as THREE.SkinnedMesh).skeleton
                        }
                        position={[0.007, 1.406, -0.031]}
                        scale={0.008}
                        receiveShadow
                    />
                </group>
            </group>
        </group>
    );
};

useGLTF.preload("/astronaut_opti_draco-transformed.glb");

export default Astronaut;
